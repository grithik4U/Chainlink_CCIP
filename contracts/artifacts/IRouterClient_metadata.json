{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "InsufficientFeeTokenAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidMsgValue",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "destChainSelector",
						"type": "uint64"
					}
				],
				"name": "UnsupportedDestinationChain",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "destinationChainSelector",
						"type": "uint64"
					},
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "receiver",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "tokenAmounts",
								"type": "tuple[]"
							},
							{
								"internalType": "address",
								"name": "feeToken",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "extraArgs",
								"type": "bytes"
							}
						],
						"internalType": "struct Client.EVM2AnyMessage",
						"name": "message",
						"type": "tuple"
					}
				],
				"name": "ccipSend",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "destinationChainSelector",
						"type": "uint64"
					},
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "receiver",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "tokenAmounts",
								"type": "tuple[]"
							},
							{
								"internalType": "address",
								"name": "feeToken",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "extraArgs",
								"type": "bytes"
							}
						],
						"internalType": "struct Client.EVM2AnyMessage",
						"name": "message",
						"type": "tuple"
					}
				],
				"name": "getFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "destChainSelector",
						"type": "uint64"
					}
				],
				"name": "isChainSupported",
				"outputs": [
					{
						"internalType": "bool",
						"name": "supported",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
					"details": "Note if msg.value is larger than the required fee (from getFee) we accept the overpayment with no refund.Reverts with appropriate reason upon invalid message.",
					"params": {
						"destinationChainSelector": "The destination chain ID",
						"message": "The cross-chain CCIP message including data and/or tokens"
					},
					"returns": {
						"_0": "messageId The message ID"
					}
				},
				"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
					"details": "Reverts with appropriate reason upon invalid message.",
					"params": {
						"destinationChainSelector": "The destination chainSelector",
						"message": "The cross-chain CCIP message including data and/or tokens"
					},
					"returns": {
						"fee": "returns execution fee for the message delivery to destination chain, denominated in the feeToken specified in the message."
					}
				},
				"isChainSupported(uint64)": {
					"params": {
						"destChainSelector": "The chain to check."
					},
					"returns": {
						"supported": "is true if it is supported, false if not."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"ccipSend(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
					"notice": "Request a message to be sent to the destination chain"
				},
				"isChainSupported(uint64)": {
					"notice": "Checks if the given chain ID is supported for sending/receiving."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/CCIPTokenSender_flattened.sol": "IRouterClient"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CCIPTokenSender_flattened.sol": {
			"keccak256": "0xe977738ef7439a3a86b55d29c6c2a713da3c50c27cb268dead8a2fb0fea4314f",
			"urls": [
				"bzz-raw://ee087ed2fe61d93bb0a0ff392a0175ad26fb26123dc472b1630b78bdd5f57d99",
				"dweb:/ipfs/QmWUBpNES29Pphn2UEgXnmSTVtphsruswUj9L4gyBW5ohr"
			]
		}
	},
	"version": 1
}